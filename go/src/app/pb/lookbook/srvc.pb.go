// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/lookbook/srvc.proto

/*
Package lookbook_srvc is a generated protocol buffer package.

It is generated from these files:
	protos/lookbook/srvc.proto

It has these top-level messages:
	Empty
*/
package lookbook_srvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import lookbook_msg "protos/lookbook"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Empty)(nil), "lookbook.srvc.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Lookbook service

type LookbookClient interface {
	CreateLookbook(ctx context.Context, in *lookbook_msg.Lookbook, opts ...grpc.CallOption) (*lookbook_msg.Response, error)
	ListLookbooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*lookbook_msg.Response, error)
	GetLookbookById(ctx context.Context, in *lookbook_msg.Id, opts ...grpc.CallOption) (*lookbook_msg.Response, error)
	GetLookbooksByUsersId(ctx context.Context, in *lookbook_msg.UsersId, opts ...grpc.CallOption) (*lookbook_msg.Response, error)
	UpdateLookbookNameById(ctx context.Context, in *lookbook_msg.NameRequest, opts ...grpc.CallOption) (*lookbook_msg.Response, error)
	AddItemToLookbook(ctx context.Context, in *lookbook_msg.ItemsRequest, opts ...grpc.CallOption) (*lookbook_msg.Response, error)
	RemoveItemFromLookbook(ctx context.Context, in *lookbook_msg.ItemsRequest, opts ...grpc.CallOption) (*lookbook_msg.Response, error)
	DeleteLookbookById(ctx context.Context, in *lookbook_msg.Id, opts ...grpc.CallOption) (*lookbook_msg.Response, error)
}

type lookbookClient struct {
	cc *grpc.ClientConn
}

func NewLookbookClient(cc *grpc.ClientConn) LookbookClient {
	return &lookbookClient{cc}
}

func (c *lookbookClient) CreateLookbook(ctx context.Context, in *lookbook_msg.Lookbook, opts ...grpc.CallOption) (*lookbook_msg.Response, error) {
	out := new(lookbook_msg.Response)
	err := grpc.Invoke(ctx, "/lookbook.srvc.Lookbook/CreateLookbook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookbookClient) ListLookbooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*lookbook_msg.Response, error) {
	out := new(lookbook_msg.Response)
	err := grpc.Invoke(ctx, "/lookbook.srvc.Lookbook/ListLookbooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookbookClient) GetLookbookById(ctx context.Context, in *lookbook_msg.Id, opts ...grpc.CallOption) (*lookbook_msg.Response, error) {
	out := new(lookbook_msg.Response)
	err := grpc.Invoke(ctx, "/lookbook.srvc.Lookbook/GetLookbookById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookbookClient) GetLookbooksByUsersId(ctx context.Context, in *lookbook_msg.UsersId, opts ...grpc.CallOption) (*lookbook_msg.Response, error) {
	out := new(lookbook_msg.Response)
	err := grpc.Invoke(ctx, "/lookbook.srvc.Lookbook/GetLookbooksByUsersId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookbookClient) UpdateLookbookNameById(ctx context.Context, in *lookbook_msg.NameRequest, opts ...grpc.CallOption) (*lookbook_msg.Response, error) {
	out := new(lookbook_msg.Response)
	err := grpc.Invoke(ctx, "/lookbook.srvc.Lookbook/UpdateLookbookNameById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookbookClient) AddItemToLookbook(ctx context.Context, in *lookbook_msg.ItemsRequest, opts ...grpc.CallOption) (*lookbook_msg.Response, error) {
	out := new(lookbook_msg.Response)
	err := grpc.Invoke(ctx, "/lookbook.srvc.Lookbook/AddItemToLookbook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookbookClient) RemoveItemFromLookbook(ctx context.Context, in *lookbook_msg.ItemsRequest, opts ...grpc.CallOption) (*lookbook_msg.Response, error) {
	out := new(lookbook_msg.Response)
	err := grpc.Invoke(ctx, "/lookbook.srvc.Lookbook/RemoveItemFromLookbook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookbookClient) DeleteLookbookById(ctx context.Context, in *lookbook_msg.Id, opts ...grpc.CallOption) (*lookbook_msg.Response, error) {
	out := new(lookbook_msg.Response)
	err := grpc.Invoke(ctx, "/lookbook.srvc.Lookbook/DeleteLookbookById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lookbook service

type LookbookServer interface {
	CreateLookbook(context.Context, *lookbook_msg.Lookbook) (*lookbook_msg.Response, error)
	ListLookbooks(context.Context, *Empty) (*lookbook_msg.Response, error)
	GetLookbookById(context.Context, *lookbook_msg.Id) (*lookbook_msg.Response, error)
	GetLookbooksByUsersId(context.Context, *lookbook_msg.UsersId) (*lookbook_msg.Response, error)
	UpdateLookbookNameById(context.Context, *lookbook_msg.NameRequest) (*lookbook_msg.Response, error)
	AddItemToLookbook(context.Context, *lookbook_msg.ItemsRequest) (*lookbook_msg.Response, error)
	RemoveItemFromLookbook(context.Context, *lookbook_msg.ItemsRequest) (*lookbook_msg.Response, error)
	DeleteLookbookById(context.Context, *lookbook_msg.Id) (*lookbook_msg.Response, error)
}

func RegisterLookbookServer(s *grpc.Server, srv LookbookServer) {
	s.RegisterService(&_Lookbook_serviceDesc, srv)
}

func _Lookbook_CreateLookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lookbook_msg.Lookbook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookbookServer).CreateLookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookbook.srvc.Lookbook/CreateLookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookbookServer).CreateLookbook(ctx, req.(*lookbook_msg.Lookbook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookbook_ListLookbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookbookServer).ListLookbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookbook.srvc.Lookbook/ListLookbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookbookServer).ListLookbooks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookbook_GetLookbookById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lookbook_msg.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookbookServer).GetLookbookById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookbook.srvc.Lookbook/GetLookbookById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookbookServer).GetLookbookById(ctx, req.(*lookbook_msg.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookbook_GetLookbooksByUsersId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lookbook_msg.UsersId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookbookServer).GetLookbooksByUsersId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookbook.srvc.Lookbook/GetLookbooksByUsersId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookbookServer).GetLookbooksByUsersId(ctx, req.(*lookbook_msg.UsersId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookbook_UpdateLookbookNameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lookbook_msg.NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookbookServer).UpdateLookbookNameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookbook.srvc.Lookbook/UpdateLookbookNameById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookbookServer).UpdateLookbookNameById(ctx, req.(*lookbook_msg.NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookbook_AddItemToLookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lookbook_msg.ItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookbookServer).AddItemToLookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookbook.srvc.Lookbook/AddItemToLookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookbookServer).AddItemToLookbook(ctx, req.(*lookbook_msg.ItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookbook_RemoveItemFromLookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lookbook_msg.ItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookbookServer).RemoveItemFromLookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookbook.srvc.Lookbook/RemoveItemFromLookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookbookServer).RemoveItemFromLookbook(ctx, req.(*lookbook_msg.ItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookbook_DeleteLookbookById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lookbook_msg.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookbookServer).DeleteLookbookById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookbook.srvc.Lookbook/DeleteLookbookById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookbookServer).DeleteLookbookById(ctx, req.(*lookbook_msg.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lookbook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lookbook.srvc.Lookbook",
	HandlerType: (*LookbookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLookbook",
			Handler:    _Lookbook_CreateLookbook_Handler,
		},
		{
			MethodName: "ListLookbooks",
			Handler:    _Lookbook_ListLookbooks_Handler,
		},
		{
			MethodName: "GetLookbookById",
			Handler:    _Lookbook_GetLookbookById_Handler,
		},
		{
			MethodName: "GetLookbooksByUsersId",
			Handler:    _Lookbook_GetLookbooksByUsersId_Handler,
		},
		{
			MethodName: "UpdateLookbookNameById",
			Handler:    _Lookbook_UpdateLookbookNameById_Handler,
		},
		{
			MethodName: "AddItemToLookbook",
			Handler:    _Lookbook_AddItemToLookbook_Handler,
		},
		{
			MethodName: "RemoveItemFromLookbook",
			Handler:    _Lookbook_RemoveItemFromLookbook_Handler,
		},
		{
			MethodName: "DeleteLookbookById",
			Handler:    _Lookbook_DeleteLookbookById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/lookbook/srvc.proto",
}

func init() { proto.RegisterFile("protos/lookbook/srvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xdb, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x6f, 0x3c, 0x31, 0x50, 0x0f, 0xc1, 0x2e, 0x74, 0x2f, 0x7d, 0x80, 0x14, 0xf4, 0x52,
	0x14, 0xad, 0xda, 0xb2, 0xb8, 0x78, 0xb1, 0xd8, 0x07, 0x68, 0xcd, 0x20, 0xd2, 0xc6, 0x59, 0x33,
	0xb1, 0xb0, 0xef, 0xe5, 0x03, 0x4a, 0x62, 0x37, 0x36, 0x0b, 0x41, 0xa4, 0xb7, 0xdf, 0xfe, 0xdf,
	0xbf, 0x33, 0x43, 0x20, 0xaf, 0x0d, 0x59, 0xe2, 0xe1, 0x92, 0x68, 0x31, 0x27, 0x5a, 0x0c, 0xd9,
	0xac, 0x5e, 0xa4, 0x87, 0xa2, 0xd7, 0x42, 0xe9, 0x60, 0x3e, 0xe8, 0x46, 0x35, 0xbf, 0xfe, 0x24,
	0xcf, 0xf6, 0x61, 0xf7, 0x41, 0xd7, 0xb6, 0x39, 0xff, 0xda, 0x81, 0x83, 0x72, 0xfd, 0x5d, 0xdc,
	0xc0, 0xe1, 0x9d, 0xc1, 0x99, 0xc5, 0x40, 0x32, 0x19, 0x2a, 0x9d, 0xdc, 0xf2, 0xbc, 0xc3, 0x2b,
	0xe4, 0x9a, 0xde, 0x19, 0xc5, 0x15, 0xf4, 0xca, 0x37, 0xb6, 0x6d, 0x8e, 0xc5, 0xa9, 0x8c, 0x66,
	0x92, 0xfe, 0xaf, 0x49, 0xfd, 0x12, 0x8e, 0x26, 0x18, 0xec, 0x51, 0x53, 0x28, 0x71, 0x1c, 0x47,
	0x0b, 0x95, 0x94, 0xc7, 0xd0, 0xdf, 0x90, 0x79, 0xd4, 0x4c, 0x19, 0x0d, 0x17, 0x4a, 0xf4, 0x63,
	0x61, 0x8d, 0x93, 0x3d, 0x8f, 0x90, 0x4d, 0x6b, 0xb5, 0x71, 0x85, 0xa7, 0x99, 0x46, 0x3f, 0xcb,
	0x20, 0x36, 0x1c, 0xaf, 0xf0, 0xe3, 0x13, 0xd9, 0x26, 0xcb, 0x26, 0x70, 0x72, 0xab, 0x54, 0x61,
	0x51, 0x3f, 0x53, 0xb8, 0x6a, 0xde, 0xd9, 0xc9, 0xa2, 0xe6, 0xbf, 0x8a, 0x4a, 0xc8, 0x2a, 0xd4,
	0xb4, 0x42, 0x97, 0x1e, 0x1b, 0xd2, 0x5b, 0xb5, 0x5d, 0x83, 0xb8, 0xc7, 0x25, 0xfe, 0xee, 0xf8,
	0xbf, 0x5b, 0xcf, 0xf7, 0xfc, 0x33, 0xba, 0xf8, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x4f, 0x71,
	0x9a, 0x8e, 0x02, 0x00, 0x00,
}
